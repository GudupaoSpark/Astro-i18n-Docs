{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"about/","title":"About","text":""},{"location":"about/#about-this-project","title":"About this project","text":"<p>This project is an i18n plugin developed by Gudupao (Gudupao Spark Inc.) based on the Astro framework.</p>"},{"location":"about/#open-source-agreement","title":"Open source agreement","text":"<p>MIT</p>"},{"location":"configuration/","title":"Astro-i18n Configuration","text":""},{"location":"configuration/#overview","title":"Overview","text":"<p>Astro-i18n can be configured with various options to customize its behavior. This document details each configuration option, its purpose, and default value.</p> <p>Astro-i18n supports two main modes of operation: - Path-based: Languages are identified by URL paths (e.g., <code>/en/about</code>, <code>/zh/about</code>). This is controlled by the <code>pathBasedRouting</code> option. - Path-less: Language is determined by other means (cookie, Accept-Language header) without changing the URL path. This is also controlled by the <code>pathBasedRouting</code> option.</p>"},{"location":"configuration/#common-configuration-options","title":"Common Configuration Options","text":"<p>These options are available for both path-based and path-less modes.</p>"},{"location":"configuration/#localesdir","title":"<code>localesDir</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The directory where your locale files are stored.</li> <li>Default: <code>'locales'</code></li> </ul> <p>Example: <pre><code>integrations: [\n  astroI18nPlugin({\n    localesDir: './my-locales'\n })\n]\n</code></pre></p>"},{"location":"configuration/#fallbacklang","title":"<code>fallbackLang</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Description: The language to fall back to if a translation is not found for the current language.</li> <li>Default: <code>'en'</code></li> </ul> <p>Example: <pre><code>integrations: [\n astroI18nPlugin({\n    fallbackLang: 'zh'\n  })\n]\n</code></pre></p>"},{"location":"configuration/#autodetectlanguage","title":"<code>autoDetectLanguage</code>","text":"<ul> <li>Type: <code>boolean</code></li> <li>Description: Whether to automatically detect the user's language from the Accept-Language header.</li> <li>Default: <code>true</code></li> </ul> <p>Example (with auto-detect): <pre><code>integrations: [\n  astroI18nPlugin({\n    autoDetectLanguage: true\n  })\n]\n</code></pre></p> <p>Example (without auto-detect): <pre><code>integrations: [\n  astroI18nPlugin({\n    autoDetectLanguage: false\n  })\n]\n</code></pre></p>"},{"location":"configuration/#pathbasedrouting","title":"<code>pathBasedRouting</code>","text":"<ul> <li>Type: <code>boolean</code></li> <li>Description: Whether to use path-based routing. If <code>true</code>, languages are identified by URL paths (e.g., <code>/en/about</code>, <code>/zh/about</code>). If <code>false</code>, language is determined by other means (cookie, Accept-Language header) without changing the URL path.</li> <li>Default: <code>true</code></li> </ul> <p>This option determines the mode of operation: - <code>true</code> (default): Path-based mode. - <code>false</code>: Path-less mode.</p> <p>Example (Path-based): <pre><code>integrations: [\n  astroI18nPlugin({\n    pathBasedRouting: true\n  })\n]\n</code></pre></p> <p>Example (Path-less): <pre><code>integrations: [\n  astroI18nPlugin({\n    pathBasedRouting: false\n  })\n]\n</code></pre></p>"},{"location":"configuration/#path-based-mode-configuration-pathbasedrouting-true","title":"Path-based Mode Configuration (pathBasedRouting: true)","text":"<p>When <code>pathBasedRouting</code> is <code>true</code>, Astro-i18n operates in path-based mode. All the common configuration options apply.</p>"},{"location":"configuration/#path-less-mode-configuration-pathbasedrouting-false","title":"Path-less Mode Configuration (pathBasedRouting: false)","text":"<p>When <code>pathBasedRouting</code> is <code>false</code>, Astro-i18n operates in path-less mode. All the common configuration options apply.</p> <p>The main difference is in how the language is determined and how URLs are handled: - In path-based mode, the language is part of the URL path. - In path-less mode, the language is determined by other means (cookie, Accept-Language header) and the URL path remains unchanged.</p>"},{"location":"installation/","title":"Astro-i18n Installation","text":""},{"location":"installation/#installation","title":"Installation","text":"<pre><code>pnpm add @gudupao/astro-i18n\n</code></pre>"},{"location":"start/","title":"Astro-i18n","text":"<p>Note: Installation instructions have been moved to Installation.</p>"},{"location":"start/#usage","title":"Usage","text":"<p>For detailed configuration options, please see Configuration.</p>"},{"location":"start/#astro","title":"Astro","text":"<pre><code>---\nimport { getTranslator } from '@gudupao/astro-i18n';\n\n// Get language from params\nconst lang = Astro.params.lang || 'en';\nconst t = getTranslator(lang);\n---\n\n&lt;div&gt;\n  &lt;h1&gt;Astro Test: {t('hello')} {t('123.a')}&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"start/#react","title":"React","text":"<pre><code>import React from 'react';\nimport { createClientTranslator } from '@gudupao/astro-i18n';\nimport type { Translations } from '@gudupao/astro-i18n';\n\nconst TestComponent = ({ translations }: { translations: Translations }) =&gt; {\n  const t = createClientTranslator(translations);\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;React Test: {t('hello')} {t('123.a')}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default TestComponent;\n</code></pre>"},{"location":"start/#vue","title":"Vue","text":"<pre><code>&lt;template&gt;\n &lt;div&gt;\n    &lt;h1&gt;Vue Test: {{ t('hello') }} {{ t('123.a') }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { createClientTranslator } from '@gudupao/astro-i18n';\nimport type { Translations } from '@gudupao/astro-i18n';\n\ninterface Props {\n  translations: Translations;\n}\n\nconst props = defineProps&lt;Props&gt;();\nconst t = createClientTranslator(props.translations);\n&lt;/script&gt;\n</code></pre>"},{"location":"start/#language-switcher-examples","title":"Language Switcher Examples","text":""},{"location":"start/#path-based-version","title":"Path-based Version","text":"<pre><code>---\ninterface Props {\n  lang: string;\n}\n\nconst { lang } = Astro.props;\n---\n\n&lt;script is:inline&gt;\n  function switchLanguage(language) {\n    // Set language Cookie\n    document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n    console.log('[LanguageSwitcher] Set language Cookie:', language);\n\n    const urlParts = window.location.pathname.split('/');\n    urlParts[1] = language;\n    window.location.href = urlParts.join('/');\n  }\n\n  const currentPath = window.location.pathname;\n  const urlParts = currentPath.split('/');\n&lt;/script&gt;\n\n&lt;div class=\"language-switcher\"&gt;\n  &lt;button\n    onclick=\"switchLanguage('en')\"\n    class={lang === 'en' ? 'active' : ''}\n  &gt;\n    English\n  &lt;/button&gt;\n  &lt;button\n    onclick=\"switchLanguage('zh')\"\n    class={lang === 'zh' ? 'active' : ''}\n  &gt;\n    \u4e2d\u6587\n  &lt;/button&gt;\n    &lt;button\n    onclick=\"switchLanguage('jp')\"\n    class={lang === 'jp' ? 'active' : ''}\n  &gt;\n    \u65e5\u672c\u8a9e\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.language-switcher {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.language-switcher button {\n  padding: 5px 10px;\n  border: none;\n  background: #f0f0f0;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.language-switcher button.active {\n  background: #007bff;\n  color: white;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"start/#path-less-version","title":"Path-less Version","text":"<pre><code>---\n// Get all available languages\nconst { getAvailableLanguages } = await import('@gudupao/astro-i18n');\nconst availableLanguages = getAvailableLanguages();\n\ninterface Props {\n  pathBasedRouting?: boolean; // Whether to use path-based routing mode\n}\n\nconst { pathBasedRouting = true } = Astro.props;\n\n// Function to detect current language\nfunction detectCurrentLanguage() {\n  // First check URL parameters\n  const urlParams = new URLSearchParams(Astro.url.search);\n  const langParam = urlParams.get('lang');\n  if (langParam) return langParam;\n\n  // Then check Cookie\n  const cookies = Astro.request.headers.get('cookie');\n  if (cookies) {\n    const cookieObj = Object.fromEntries(\n      cookies.split(';').map(cookie =&gt; {\n        const [name, value] = cookie.trim().split('=');\n        return [name, decodeURIComponent(value)];\n      })\n    );\n    if (cookieObj.lang) return cookieObj.lang;\n }\n\n  // Return default language\n  return 'en';\n}\n\n// Get current language\nconst currentLang = detectCurrentLanguage();\n---\n\n&lt;div class=\"language-switcher\"&gt;\n  &lt;h3&gt;Language Switcher (New Version)&lt;/h3&gt;\n  &lt;p&gt;Current Mode: {pathBasedRouting ? 'Path-based Routing' : 'Path-less Routing'}&lt;/p&gt;\n  &lt;div class=\"switcher-buttons\"&gt;\n    {availableLanguages.map((language) =&gt; (\n      &lt;button\n        data-lang={language}\n        class={language === currentLang ? 'active' : ''}\n        onclick={`switchLanguage('${language}', ${pathBasedRouting})`}\n      &gt;\n        {language === 'en' &amp;&amp; 'English'}\n        {language === 'zh' &amp;&amp; '\u4e2d\u6587'}\n        {language === 'jp' &amp;&amp; '\u65e5\u672c\u8a9e'}\n        {language !== 'en' &amp;&amp; language !== 'zh' &amp;&amp; language !== 'jp' &amp;&amp; language}\n      &lt;/button&gt;\n    ))}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script is:inline&gt;\n  // Function to switch language\n  function switchLanguage(language, pathBasedRouting) {\n    if (pathBasedRouting) {\n      // Path-based routing mode\n      // Set language Cookie\n      document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n      console.log('[LanguageSwitcher] Set language Cookie:', language);\n\n      const urlParts = window.location.pathname.split('/');\n      urlParts[1] = language;\n      window.location.href = urlParts.join('/');\n    } else {\n      // Path-less routing mode\n      // Set language Cookie\n      document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n      // Set localStorage\n      localStorage.setItem('lang', language);\n      // Reload the page to apply the new language\n      window.location.reload();\n    }\n  }\n&lt;/script&gt;\n\n&lt;style&gt;\n.language-switcher {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 20px 0;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f9f9f9;\n}\n\n.switcher-buttons {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.language-switcher button {\n  padding: 8px 12px;\n  border: none;\n  background: #f0f0f0;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.language-switcher button:hover {\n  background: #e0e0e0;\n}\n\n.language-switcher button.active {\n  background: #007bff;\n  color: white;\n}\n\n.language-switcher h3 {\n  margin: 0 0 10px 0;\n  font-size: 16px;\n  color: #333;\n}\n\n.language-switcher p {\n  margin: 0 0 10px 0;\n  font-size: 14px;\n  color: #666;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"zh/about/","title":"\u5173\u4e8e","text":""},{"location":"zh/about/#_1","title":"\u5173\u4e8e\u672c\u9879\u76ee","text":"<p>\u672c\u9879\u76ee\u662f\u7531Gudupao(Gudupao Spark Inc.)\u57fa\u4e8eAstro\u6846\u67b6\u5f00\u53d1\u7684i18n\u63d2\u4ef6\u3002</p>"},{"location":"zh/about/#_2","title":"\u5f00\u6e90\u534f\u8bae","text":"<p>MIT</p>"},{"location":"zh/configuration/","title":"Astro-i18n \u914d\u7f6e","text":""},{"location":"zh/configuration/#_1","title":"\u6982\u8ff0","text":"<p>Astro-i18n \u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u9009\u9879\u8fdb\u884c\u914d\u7f6e\uff0c\u4ee5\u81ea\u5b9a\u4e49\u5176\u884c\u4e3a\u3002\u672c\u6587\u6863\u8be6\u7ec6\u8bf4\u660e\u6bcf\u4e2a\u914d\u7f6e\u9009\u9879\u3001\u5176\u7528\u9014\u548c\u9ed8\u8ba4\u503c\u3002</p> <p>Astro-i18n \u652f\u6301\u4e24\u79cd\u4e3b\u8981\u64cd\u4f5c\u6a21\u5f0f\uff1a - \u57fa\u4e8e\u8def\u5f84\uff1a\u901a\u8fc7 URL \u8def\u5f84\u8bc6\u522b\u8bed\u8a00 (\u4f8b\u5982 <code>/en/about</code>, <code>/zh/about</code>)\u3002\u8fd9\u7531 <code>pathBasedRouting</code> \u9009\u9879\u63a7\u5236\u3002 - \u65e0\u8def\u5f84\uff1a\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f (Cookie, Accept-Language \u5934) \u786e\u5b9a\u8bed\u8a00\uff0c\u800c\u4e0d\u6539\u53d8 URL \u8def\u5f84\u3002\u8fd9\u4e5f\u7531 <code>pathBasedRouting</code> \u9009\u9879\u63a7\u5236\u3002</p>"},{"location":"zh/configuration/#_2","title":"\u901a\u7528\u914d\u7f6e\u9009\u9879","text":"<p>\u8fd9\u4e9b\u9009\u9879\u9002\u7528\u4e8e\u57fa\u4e8e\u8def\u5f84\u548c\u65e0\u8def\u5f84\u4e24\u79cd\u6a21\u5f0f\u3002</p>"},{"location":"zh/configuration/#localesdir","title":"<code>localesDir</code>","text":"<ul> <li>\u7c7b\u578b: <code>string</code></li> <li>\u8bf4\u660e: \u5b58\u653e\u8bed\u8a00\u6587\u4ef6\u7684\u76ee\u5f55\u3002</li> <li>\u9ed8\u8ba4\u503c: <code>'locales'</code></li> </ul> <p>\u793a\u4f8b: <pre><code>integrations: [\n  astroI18nPlugin({\n    localesDir: './my-locales'\n  })\n]\n</code></pre></p>"},{"location":"zh/configuration/#fallbacklang","title":"<code>fallbackLang</code>","text":"<ul> <li>\u7c7b\u578b: <code>string</code></li> <li>\u8bf4\u660e: \u5f53\u524d\u8bed\u8a00\u627e\u4e0d\u5230\u7ffb\u8bd1\u65f6\uff0c\u56de\u9000\u5230\u7684\u8bed\u8a00\u3002</li> <li>\u9ed8\u8ba4\u503c: <code>'en'</code></li> </ul> <p>\u793a\u4f8b: <pre><code>integrations: [\n  astroI18nPlugin({\n    fallbackLang: 'zh'\n  })\n]\n</code></pre></p>"},{"location":"zh/configuration/#autodetectlanguage","title":"<code>autoDetectLanguage</code>","text":"<ul> <li>\u7c7b\u578b: <code>boolean</code></li> <li>\u8bf4\u660e: \u662f\u5426\u81ea\u52a8\u4ece Accept-Language \u5934\u68c0\u6d4b\u7528\u6237\u7684\u8bed\u8a00\u3002</li> <li>\u9ed8\u8ba4\u503c: <code>true</code></li> </ul> <p>\u793a\u4f8b (\u5e26\u81ea\u52a8\u68c0\u6d4b): <pre><code>integrations: [\n  astroI18nPlugin({\n    autoDetectLanguage: true\n  })\n]\n</code></pre></p> <p>\u793a\u4f8b (\u4e0d\u5e26\u81ea\u52a8\u68c0\u6d4b): <pre><code>integrations: [\n  astroI18nPlugin({\n    autoDetectLanguage: false\n  })\n]\n</code></pre></p>"},{"location":"zh/configuration/#pathbasedrouting","title":"<code>pathBasedRouting</code>","text":"<ul> <li>\u7c7b\u578b: <code>boolean</code></li> <li>\u8bf4\u660e: \u662f\u5426\u4f7f\u7528\u57fa\u4e8e\u8def\u5f84\u7684\u8def\u7531\u3002\u5982\u679c\u4e3a <code>true</code>\uff0c\u8bed\u8a00\u7531 URL \u8def\u5f84\u8bc6\u522b (\u4f8b\u5982 <code>/en/about</code>, <code>/zh/about</code>)\u3002\u5982\u679c\u4e3a <code>false</code>\uff0c\u8bed\u8a00\u7531\u5176\u4ed6\u65b9\u5f0f (Cookie, Accept-Language \u5934) \u786e\u5b9a\uff0c\u800c\u4e0d\u6539\u53d8 URL \u8def\u5f84\u3002</li> <li>\u9ed8\u8ba4\u503c: <code>true</code></li> </ul> <p>\u6b64\u9009\u9879\u51b3\u5b9a\u4e86\u64cd\u4f5c\u6a21\u5f0f\uff1a - <code>true</code> (\u9ed8\u8ba4): \u57fa\u4e8e\u8def\u5f84\u6a21\u5f0f\u3002 - <code>false</code>: \u65e0\u8def\u5f84\u6a21\u5f0f\u3002</p> <p>\u793a\u4f8b (\u57fa\u4e8e\u8def\u5f84): <pre><code>integrations: [\n  astroI18nPlugin({\n    pathBasedRouting: true\n  })\n]\n</code></pre></p> <p>\u793a\u4f8b (\u65e0\u8def\u5f84): <pre><code>integrations: [\n  astroI18nPlugin({\n    pathBasedRouting: false\n  })\n]\n</code></pre></p>"},{"location":"zh/configuration/#pathbasedrouting-true","title":"\u57fa\u4e8e\u8def\u5f84\u6a21\u5f0f\u914d\u7f6e (pathBasedRouting: true)","text":"<p>\u5f53 <code>pathBasedRouting</code> \u4e3a <code>true</code> \u65f6\uff0cAstro-i18n \u5728\u57fa\u4e8e\u8def\u5f84\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u6240\u6709\u901a\u7528\u914d\u7f6e\u9009\u9879\u90fd\u9002\u7528\u3002</p>"},{"location":"zh/configuration/#pathbasedrouting-false","title":"\u65e0\u8def\u5f84\u6a21\u5f0f\u914d\u7f6e (pathBasedRouting: false)","text":"<p>\u5f53 <code>pathBasedRouting</code> \u4e3a <code>false</code> \u65f6\uff0cAstro-i18n \u5728\u65e0\u8def\u5f84\u6a21\u5f0f\u4e0b\u8fd0\u884c\u3002\u6240\u6709\u901a\u7528\u914d\u7f6e\u9009\u9879\u90fd\u9002\u7528\u3002</p> <p>\u4e3b\u8981\u533a\u522b\u5728\u4e8e\u8bed\u8a00\u5982\u4f55\u786e\u5b9a\u4ee5\u53ca URL \u5982\u4f55\u5904\u7406\uff1a - \u5728\u57fa\u4e8e\u8def\u5f84\u6a21\u5f0f\u4e0b\uff0c\u8bed\u8a00\u662f URL \u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002 - \u5728\u65e0\u8def\u5f84\u6a21\u5f0f\u4e0b\uff0c\u8bed\u8a00\u7531\u5176\u4ed6\u65b9\u5f0f\uff08Cookie\u3001Accept-Language \u5934\uff09\u786e\u5b9a\uff0cURL \u8def\u5f84\u4fdd\u6301\u4e0d\u53d8\u3002</p>"},{"location":"zh/installation/","title":"Astro-i18n \u5b89\u88dd","text":""},{"location":"zh/installation/#_1","title":"\u5b89\u88dd","text":"<pre><code>pnpm add @gudupao/astro-i18n\n</code></pre>"},{"location":"zh/start/","title":"Astro-i18n","text":"<p>\u6ce8\u610f: \u5b89\u88c5\u8bf4\u660e\u5df2\u79fb\u81f3 \u5b89\u88c5\u3002</p>"},{"location":"zh/start/#_1","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>\u6709\u5173\u8be6\u7ec6\u7684\u914d\u7f6e\u9009\u9879\uff0c\u8bf7\u53c2\u89c1 \u914d\u7f6e\u3002</p>"},{"location":"zh/start/#astro","title":"Astro","text":"<pre><code>---\nimport { getTranslator } from '@gudupao/astro-i18n';\n\n// \u4ece\u53c2\u6570\u83b7\u53d6\u8bed\u8a00\nconst lang = Astro.params.lang || 'en';\nconst t = getTranslator(lang);\n---\n\n&lt;div&gt;\n  &lt;h1&gt;Astro Test: {t('hello')} {t('123.a')}&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"zh/start/#react","title":"React","text":"<pre><code>import React from 'react';\nimport { createClientTranslator } from '@gudupao/astro-i18n';\nimport type { Translations } from '@gudupao/astro-i18n';\n\nconst TestComponent = ({ translations }: { translations: Translations }) =&gt; {\n  const t = createClientTranslator(translations);\n\n return (\n    &lt;div&gt;\n      &lt;h1&gt;React Test: {t('hello')} {t('123.a')}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default TestComponent;\n</code></pre>"},{"location":"zh/start/#vue","title":"Vue","text":"<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;Vue Test: {{ t('hello') }} {{ t('123.a') }}&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=\"ts\"&gt;\nimport { createClientTranslator } from '@gudupao/astro-i18n';\nimport type { Translations } from '@gudupao/astro-i18n';\n\ninterface Props {\n  translations: Translations;\n}\n\nconst props = defineProps&lt;Props&gt;();\nconst t = createClientTranslator(props.translations);\n&lt;/script&gt;\n</code></pre>"},{"location":"zh/start/#_2","title":"\u8bed\u8a00\u5207\u6362\u5668\u793a\u4f8b","text":""},{"location":"zh/start/#_3","title":"\u6709\u8def\u5f84\u7248\u672c","text":"<pre><code>---\ninterface Props {\n  lang: string;\n}\n\nconst { lang } = Astro.props;\n---\n\n&lt;script is:inline&gt;\n  function switchLanguage(language) {\n    // \u8bbe\u7f6e\u8bed\u8a00 Cookie\n    document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n    console.log('[LanguageSwitcher] \u8bbe\u7f6e\u8bed\u8a00 Cookie:', language);\n\n    const urlParts = window.location.pathname.split('/');\n    urlParts[1] = language;\n    window.location.href = urlParts.join('/');\n  }\n\n  const currentPath = window.location.pathname;\n  const urlParts = currentPath.split('/');\n&lt;/script&gt;\n\n&lt;div class=\"language-switcher\"&gt;\n  &lt;button\n    onclick=\"switchLanguage('en')\"\n    class={lang === 'en' ? 'active' : ''}\n  &gt;\n    English\n  &lt;/button&gt;\n  &lt;button\n    onclick=\"switchLanguage('zh')\"\n    class={lang === 'zh' ? 'active' : ''}\n  &gt;\n    \u4e2d\u6587\n  &lt;/button&gt;\n    &lt;button\n    onclick=\"switchLanguage('jp')\"\n    class={lang === 'jp' ? 'active' : ''}\n  &gt;\n    \u65e5\u672c\u8a9e\n  &lt;/button&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.language-switcher {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.language-switcher button {\n  padding: 5px 10px;\n  border: none;\n  background: #f0f0f0;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.language-switcher button.active {\n  background: #007bff;\n  color: white;\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"zh/start/#_4","title":"\u65e0\u8def\u5f84\u7248\u672c","text":"<pre><code>---\n// \u83b7\u53d6\u6240\u6709\u53ef\u7528\u7684\u8bed\u8a00\nconst { getAvailableLanguages } = await import('@gudupao/astro-i18n');\nconst availableLanguages = getAvailableLanguages();\n\ninterface Props {\n  pathBasedRouting?: boolean; // \u662f\u5426\u4f7f\u7528\u8def\u5f84\u57fa\u4e8e\u8def\u7531\u7684\u6a21\u5f0f\n}\n\nconst { pathBasedRouting = true } = Astro.props;\n\n// \u68c0\u6d4b\u5f53\u524d\u8bed\u8a00\u7684\u51fd\u6570\nfunction detectCurrentLanguage() {\n  // \u9996\u5148\u68c0\u67e5 URL \u53c2\u6570\n  const urlParams = new URLSearchParams(Astro.url.search);\n  const langParam = urlParams.get('lang');\n  if (langParam) return langParam;\n\n  // \u7136\u540e\u68c0\u67e5 Cookie\n  const cookies = Astro.request.headers.get('cookie');\n  if (cookies) {\n    const cookieObj = Object.fromEntries(\n      cookies.split(';').map(cookie =&gt; {\n        const [name, value] = cookie.trim().split('=');\n        return [name, decodeURIComponent(value)];\n      })\n    );\n    if (cookieObj.lang) return cookieObj.lang;\n }\n\n  // \u8fd4\u56de\u9ed8\u8ba4\u8bed\u8a00\n  return 'en';\n}\n\n// \u83b7\u53d6\u5f53\u524d\u8bed\u8a00\nconst currentLang = detectCurrentLanguage();\n---\n\n&lt;div class=\"language-switcher\"&gt;\n  &lt;h3&gt;\u8bed\u8a00\u5207\u6362\u5668 (\u65b0\u7248\u672c)&lt;/h3&gt;\n  &lt;p&gt;\u5f53\u524d\u6a21\u5f0f: {pathBasedRouting ? '\u8def\u5f84\u57fa\u4e8e\u8def\u7531' : '\u65e0\u8def\u5f84\u57fa\u4e8e\u8def\u7531'}&lt;/p&gt;\n  &lt;div class=\"switcher-buttons\"&gt;\n    {availableLanguages.map((language) =&gt; (\n      &lt;button\n        data-lang={language}\n        class={language === currentLang ? 'active' : ''}\n        onclick={`switchLanguage('${language}', ${pathBasedRouting})`}\n      &gt;\n        {language === 'en' &amp;&amp; 'English'}\n        {language === 'zh' &amp;&amp; '\u4e2d\u6587'}\n        {language === 'jp' &amp;&amp; '\u65e5\u672c\u8a9e'}\n        {language !== 'en' &amp;&amp; language !== 'zh' &amp;&amp; language !== 'jp' &amp;&amp; language}\n      &lt;/button&gt;\n    ))}\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script is:inline&gt;\n  // \u5207\u6362\u8bed\u8a00\u7684\u51fd\u6570\n  function switchLanguage(language, pathBasedRouting) {\n    if (pathBasedRouting) {\n      // \u8def\u5f84\u57fa\u4e8e\u8def\u7531\u7684\u6a21\u5f0f\n      // \u8bbe\u7f6e\u8bed\u8a00 Cookie\n      document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n      console.log('[LanguageSwitcher] \u8bbe\u7f6e\u8bed\u8a00 Cookie:', language);\n\n      const urlParts = window.location.pathname.split('/');\n      urlParts[1] = language;\n      window.location.href = urlParts.join('/');\n    } else {\n      // \u65e0\u8def\u5f84\u57fa\u4e8e\u8def\u7531\u7684\u6a21\u5f0f\n      // \u8bbe\u7f6e\u8bed\u8a00 Cookie\n      document.cookie = `lang=${language}; path=/; max-age=31536000; samesite=lax`;\n      // \u8bbe\u7f6e localStorage\n      localStorage.setItem('lang', language);\n      // \u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u4ee5\u5e94\u7528\u65b0\u8bed\u8a00\n      window.location.reload();\n    }\n  }\n&lt;/script&gt;\n\n&lt;style&gt;\n.language-switcher {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin: 20px 0;\n  padding: 15px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  background-color: #f9f9;\n}\n\n.switcher-buttons {\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n}\n\n.language-switcher button {\n  padding: 8px 12px;\n  border: none;\n  background: #f0f0f0;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.language-switcher button:hover {\n  background: #e0e0e0;\n}\n\n.language-switcher button.active {\n  background: #007bff;\n  color: white;\n}\n\n.language-switcher h3 {\n  margin: 0 0 10px 0;\n  font-size: 16px;\n  color: #333;\n}\n\n.language-switcher p {\n  margin: 0 0 10px 0;\n  font-size: 14px;\n  color: #666;\n}\n&lt;/style&gt;\n</code></pre>"}]}